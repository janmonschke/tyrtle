/*globals console, module */
var Table,
    re_color = /\u001b\[(?:(?:\d+;)?\d+)?m/g
;
Table = module.exports = function () {
    this.cols = Array.prototype.slice.apply(arguments);
    this.columnDividers = false;
};
/**
 * Repeat a string.
 *
 * @param  {String} str     A string to repeat
 * @param  {Number} len     The number of times to repeat it
 *
 * @return {String}
 */
function str_repeat(str, len) {
    var A = Array;
    return (new A(len + 1)).join(str);
}

function strpad(str, len, fill, dir) {
    if (typeof str === 'undefined') {
        str = '';
    } else if (typeof str !== 'string') {
        str = String(str);
    }
    var strlen = str.length,
        delta = len - strlen,
        out = []
    ;

    if (strlen > len) {
        return str.substr(0, len);
    }
    dir = (dir && dir[0]) || 'r'; // 'l', 'r' or 'c'
    fill = fill || " ";

    if (dir === 'l' || dir === 'c') {
        out.push(str_repeat(fill, dir === 'l' ? delta : Math.floor(delta / 2)));
    }
    out.push(str);
    if (dir === 'r' || dir === 'c') {
        out.push(str_repeat(fill, dir === 'r' ? delta : Math.ceil(delta / 2)));
    }
    return out.join('');
}
function rtrim(str) {
    return str.replace(/\s+$/, '');
}
function wordwrap(str, width, cut) {
    var regex, matches, map, col_clear, lines, i, l, lineCounter, offset, insert, lastCol, pad, strWithNoLineBreaks;

    width = width || 75;
    cut = cut || false;

    if (!str) {
        return str;
    }

    // stolen from James Padolsey, http://james.padolsey.com/javascript/wordwrap-for-javascript/
    regex = '.{1,' + width + '}(\\s|$)' + (cut ? '|.{' + width + '}|.+$' : '|\\S+?(\\s|$)');
    strWithNoLineBreaks = str.replace(/\n+/g, '');
    if ((matches = re_color.exec(strWithNoLineBreaks))) {
        col_clear = "\u001b[m";
        map = [];
        pad = [];
        do {
            map.push([matches.index, matches[0]]);
        } while ((matches = re_color.exec(strWithNoLineBreaks)));
        str = str.replace(re_color, '');
        lines = str.match(new RegExp(regex, 'g')).join("\n").split(/\n/);
        for (i = 0, l = lines.length; i < l; ++i) {
            pad.push(width - (lines[i]).length);
        }
        for (i = 0, l = map.length; i < l; ++i) {
            offset = map[i][0];
            insert = map[i][1];
            lineCounter = 0;
            while (offset > lines[lineCounter].length) {
                offset -= lines[lineCounter++].length;
            }
            lines[lineCounter] = lines[lineCounter].substr(0, offset) + insert + lines[lineCounter].substr(offset);
        }
        lastCol = '';
        for (i = 0, l = lines.length; i < l; ++i) {
            lines[i] = lastCol + lines[i];
            while ((matches = re_color.exec(lines[i]))) {
                lastCol = matches[0];
            }
            lines[i] = strpad(lines[i], lines[i].length + pad[i], ' ', 'r') + col_clear;
        }
    } else {
        lines = str.match(new RegExp(regex, 'g')).join("\n").split(/\n/);
        for (i = 0, l = lines.length; i < l; ++i) {
            lines[i] = strpad(lines[i], width, ' ', 'r');
        }
    }
    return lines;
}

/**
 * Output a row of data and return the number of lines printed.
 */
Table.prototype.row = function () {
    var i, l, r, rl, j, jl,
        cols = [],
        tmp,
        maxRows = 1,
        undef,
        line,
        content,
        colorMap,
        colorTmp
    ;
    l = this.cols.length;
    if (arguments.length !== l) {
        throw "Incorrect number of arguments for `row()`, expected " + l;
    }

    for (i = 0; i < l; ++i) {
        content = arguments[i];
        tmp = wordwrap(content, this.cols[i], true);
        maxRows = Math.max(maxRows, tmp.length);
        cols.push(tmp);
    }
    for (r = 0; r < maxRows; ++r) {
        line = [];
        for (i = 0; i < l; ++i) {
            content = cols[i][r];
            if (content === undef) {
                content = str_repeat(' ', this.cols[i]);
            }
            line.push(content);
        }
        console.log(line.join(this.columnDividers ? " | " : " "));
    }
    return maxRows;
};
